I want you to generate comprehensive unit tests for services, controllers, and utility classes in a Java application. The result I want here is to ensure robust testing coverage, particularly focusing on edge cases and null inputs. Additionally, I need MockMvc-based tests for REST endpoints and suggestions for improving test coverage to reach 100%. Furthermore, generate test data builders or factory methods for the provided DTOs/entities.

Here are some essential details about the project:
- Framework/Technology Used: ________
- Testing Framework: ________
- Specific Services, Controllers, or Utility Classes to Test: ________
- Edge Cases to Consider: ________

The final output should include full unit test implementations, parameterized tests for edge cases, MockMvc tests with clear assertion statements, and a summary of suggested improvements for achieving complete test coverage. Additionally, provide examples of test data builders or factory methods that can be used to create instances of the specified DTOs/entities.

For instance, if testing a UserController, you might include a MockMvc test that checks the response for valid and invalid user creation requests, alongside a parameterized test that examines various boundary conditions for user input validation. 


I want you to refactor the code to remove common code smells such as long methods, duplicate code, and large classes. The result I want here is to apply SOLID principles to reduce complexity and improve maintainability, while also fixing security hotspots like input sanitization and logging sensitive data. 

The final output should include a comprehensive analysis that reduces cyclomatic complexity of functions and methods, enforces a consistent logging strategy using SLF4J, removes unused code, suppresses warnings correctly, and complies with naming conventions. Additionally, identify and remove hidden technical debt flagged by Sonar to ensure the codebase is clean and efficient. 

Present the refactored code in a well-organized format, clearly explaining each change made and the reasoning behind it. Include before-and-after comparisons for critical sections to highlight improvements in readability, maintainability, and security.


I want you to generate Swagger/OpenAPI documentation from code annotations. The result I want here is a comprehensive and well-structured set of API documentation that clearly outlines the API endpoints, request/response formats, and any authentication requirements. Additionally, scaffold Postman collections or REST client scripts based on the generated documentation to facilitate easy testing and integration of the API. 

Here are some essential details about the code annotations you will be working with:  
- Programming Language: ________  
- Framework/Library: ________  
- Specific Annotations Used: ________  
- Any Additional Configuration Details: ________  

The goal is to ensure that the generated documentation is clear, accurate, and user-friendly, enabling developers to understand and utilize the API effectively. Additionally, the Postman collections or REST client scripts should be easily importable and customizable, allowing for quick testing of the API endpoints. 

The final output should include the complete Swagger/OpenAPI documentation in a standard format, followed by the Postman collection file, which should include examples for each endpoint. Ensure that the documentation adheres to best practices and is ready for immediate use by developers.
