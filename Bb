import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

public class FileToKafkaProducer {

    private static final Logger LOGGER = LoggerFactory.getLogger(FileToKafkaProducer.class);
    private final KafkaProducer<String, String> producer;
    private final String topic;

    public FileToKafkaProducer(String bootstrapServers, String topic) {
        this.topic = topic;
        
        // Set up Kafka producer properties
        Properties props = new Properties();
        props.put("bootstrap.servers", bootstrapServers);
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

        producer = new KafkaProducer<>(props);
    }

    public void sendFileContentsToKafka(String filePath) {
        try {
            // Read file contents
            String message = new String(Files.readAllBytes(Paths.get(filePath)));
            LOGGER.info("File contents read: {}", message);

            // Send message to Kafka
            ProducerRecord<String, String> record = new ProducerRecord<>(topic, message);
            RecordMetadata metadata = producer.send(record).get();  // Send synchronously

            LOGGER.info("Message sent to Kafka topic {} at partition {} with offset {}", 
                        metadata.topic(), metadata.partition(), metadata.offset());

        } catch (IOException e) {
            LOGGER.error("Error reading file: ", e);
        } catch (InterruptedException | ExecutionException e) {
            LOGGER.error("Error sending message to Kafka: ", e);
        } finally {
            producer.close();
        }
    }

    public static void main(String[] args) {
        String bootstrapServers = "localhost:9092";
        String topic = "test-topic";
        String filePath = "path/to/your/textfile.txt";

        FileToKafkaProducer fileProducer = new FileToKafkaProducer(bootstrapServers, topic);
        fileProducer.sendFileContentsToKafka(filePath);
    }
}
