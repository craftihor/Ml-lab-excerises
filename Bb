package com.example.xmlparser.service;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.*;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class XmlToCsvService {

    @Value("${xml.file.path}")
    private String xmlFilePath;

    @Value("${csv.output.path}")
    private String csvOutputPath;

    public void convertXmlToCsv() throws Exception {
        Document doc = loadXmlDocument();
        XPath xPath = XPathFactory.newInstance().newXPath();

        List<String> headers = getHeaders();
        List<String> xpaths = getXpaths();

        try (FileWriter writer = new FileWriter(csvOutputPath)) {
            // Write headers
            writer.write(String.join("|", headers) + "\n");

            // Write data
            NodeList secLendCommissDetlNodes = (NodeList) xPath.compile("/SecLendCommissRep/SecLendCommissRep.info/SecLendCommiss.section/SecLendCommissDetl").evaluate(doc, XPathConstants.NODESET);

            for (int i = 0; i < secLendCommissDetlNodes.getLength(); i++) {
                List<String> rowData = new ArrayList<>();
                for (String xpath : xpaths) {
                    String value = evaluateXPath(xPath, doc, xpath, i + 1);
                    rowData.add(value);
                }
                // Add hardcoded values
                rowData.add(""); // User Selected Value
                rowData.add(""); // User entered Value
                rowData.add("AUTO BORROW"); // Hardcoded "AUTO BORROW"

                writer.write(String.join("|", rowData) + "\n");
            }
        }
    }

    private Document loadXmlDocument() throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.parse(new File(xmlFilePath));
    }

    private String evaluateXPath(XPath xPath, Document doc, String xpath, int index) throws XPathExpressionException {
        xpath = xpath.replace("[1]", "[" + index + "]");
        Node node = (Node) xPath.compile(xpath).evaluate(doc, XPathConstants.NODE);
        return node != null ? node.getTextContent() : "";
    }

    private List<String> getHeaders() {
        List<String> headers = new ArrayList<>();
        headers.add("Field Name");
        headers.add("Help");
        headers.add("businessDate");
        // Add all other headers...
        headers.add("Message Type");
        return headers;
    }

    private List<String> getXpaths() {
        List<String> xpaths = new ArrayList<>();
        xpaths.add("/SecLendCommissRep/@tmstmp");
        xpaths.add("/SecLendCommissRep/SecLendCommissRep.info/SecLendCommiss.section[1]/SecLendCommissDetl[1]/LoanRef");
        // Add all other XPaths...
        xpaths.add("/SecLendCommissRep/Acct/AcctNm");
        return xpaths;
    }
}

package com.example.xmlparser.controller;

import com.example.xmlparser.service.XmlToCsvService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api")
public class XmlParserController {

    @Autowired
    private XmlToCsvService xmlToCsvService;

    @GetMapping("/convert-xml-to-csv")
    public ResponseEntity<String> convertXmlToCsv() {
        try {
            xmlToCsvService.convertXmlToCsv();
            return ResponseEntity.ok("CSV file created successfully");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.internalServerError().body("Error creating CSV file: " + e.getMessage());
        }
    }
}
