import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaProducerService {

    private static final int MIN_PARTITION = 12;
    private static final int MAX_PARTITION = 24;

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    /**
     * Calculates the partition dynamically based on the message value.
     *
     * @param value The message value.
     * @return The partition number.
     */
    private int calculatePartition(String value) {
        if (value == null || value.isEmpty()) {
            throw new IllegalArgumentException("Message value cannot be null or empty");
        }

        int hashCode = value.hashCode();
        int range = MAX_PARTITION - MIN_PARTITION;
        return MIN_PARTITION + (Math.abs(hashCode) % range);
    }

    /**
     * Sends a message to a specific partition based on its calculated value.
     *
     * @param topic   The Kafka topic.
     * @param message The message to send.
     */
    public void sendMessage(String topic, String message) {
        int partition = calculatePartition(message);
        kafkaTemplate.send(topic, partition, null, message);
        System.out.printf("Sent message: %s to partition: %d%n", message, partition);
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
public class KafkaProducerRunner implements CommandLineRunner {

    @Autowired
    private KafkaProducerService kafkaProducerService;

    @Override
    public void run(String... args) {
        String topic = "your-topic";

        String[] messages = {"Message1", "Message2", "Message3", "Message4"};
        for (String message : messages) {
            kafkaProducerService.sendMessage(topic, message);
        }
    }
}
