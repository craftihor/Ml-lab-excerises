import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class RuleProcessorTest {

    @InjectMocks
    private RuleProcessor ruleProcessor;

    @Mock
    private RuleEngineClient ruleEngineClient;

    @Mock
    private Exchange exchange;

    @Mock
    private Message message;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(exchange.getIn()).thenReturn(message);
    }

    @ParameterizedTest
    @CsvSource({
        "0, EUR, 0, 1, 10, RP1, 10, true",
        "400, EUR, 10, 3, 30, RP2, 25, true",
        "750, EUR, 20, 5, 40, RP3, 40, false",
        "3000, EUR, 30, 10, 50, RP4, 60, true",
        "7500, EUR, 40, 20, 60, RP5, 80, false",
        "15000, EUR, 100, 35, 100, RPT, 95, true"
    })
    void testProcess(double accrualAmount, String currency, int points, int autoBorrowAge, 
                     int riskPoints, String riskPriority, int pointsToConsider, boolean wamRuleDisabled) throws Exception {
        // Arrange
        TradeVO tradeVO = new TradeVO();
        tradeVO.setAccrualCommissionAmount(accrualAmount);
        tradeVO.setAccrualCommissionAmountCurrency(currency);
        tradeVO.setPoints(points);
        tradeVO.setAutoBorrowAgeDays(autoBorrowAge);
        
        TradeEvent latestTradeEvent = new TradeEvent();
        TradeProcessingFlag flag = new TradeProcessingFlag();
        flag.setWAMRuleDisabled(wamRuleDisabled);
        latestTradeEvent.setTradeProcessingFlag(flag);
        tradeVO.setLatestTradeEvent(latestTradeEvent);

        List<TradeVO> tradeVOs = Arrays.asList(tradeVO);
        when(message.getBody()).thenReturn(tradeVOs);

        // Mock the ruleEngineClient to return the input list
        when(ruleEngineClient.execute(anyList())).thenAnswer(invocation -> invocation.getArgument(0));

        // Act
        ruleProcessor.process(exchange);

        // Assert
        verify(ruleEngineClient, times(1)).execute(anyList());
        verify(message).setBody(anyList());

        // Capture the processed list
        ArgumentCaptor<List<TradeVO>> processedListCaptor = ArgumentCaptor.forClass(List.class);
        verify(message).setBody(processedListCaptor.capture());
        List<TradeVO> processedList = processedListCaptor.getValue();

        // Assert the processed list
        assertEquals(1, processedList.size());
        TradeVO processedTradeVO = processedList.get(0);
        assertEquals(accrualAmount, processedTradeVO.getAccrualCommissionAmount());
        assertEquals(currency, processedTradeVO.getAccrualCommissionAmountCurrency());
        assertEquals(points, processedTradeVO.getPoints());
        assertEquals(autoBorrowAge, processedTradeVO.getAutoBorrowAgeDays());
        assertEquals(wamRuleDisabled, processedTradeVO.getLatestTradeEvent().getTradeProcessingFlag().isWAMRuleDisabled());
    }

    @Test
    void testProcessWithEmptyList() throws Exception {
        // Arrange
        when(message.getBody()).thenReturn(Arrays.asList());

        // Act
        ruleProcessor.process(exchange);

        // Assert
        verify(ruleEngineClient, never()).execute(anyList());
        verify(message, never()).setBody(anyList());
    }

    @Test
    void testProcessWithNullBody() throws Exception {
        // Arrange
        when(message.getBody()).thenReturn(null);

        // Act
        ruleProcessor.process(exchange);

        // Assert
        verify(ruleEngineClient, never()).execute(anyList());
        verify(message, never()).setBody(anyList());
    }
}
