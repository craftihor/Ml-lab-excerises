@Service
public class YourSchedulerService {

    @Autowired
    private YourRepository yourRepository;

    @Scheduled(fixedRate = 60000) // Run every 60 seconds
    public void fetchAndProcessData() {
        // Get the current time and calculate the timestamp for 5 minutes ago
        long fiveMinutesAgoMillis = System.currentTimeMillis() - (5 * 60 * 1000);

        // Fetch all records where status is not "processed"
        List<YourEntity> records = yourRepository.findByStatusNot("processed");

        // Filter the records based on the `updatedAt` timestamp
        List<YourEntity> recordsToProcess = records.stream()
                .filter(record -> record.getUpdatedAt().getTime() < fiveMinutesAgoMillis)
                .toList();

        // Process records in batches
        int batchSize = 50; // Define batch size
        for (int i = 0; i < recordsToProcess.size(); i += batchSize) {
            List<YourEntity> batch = recordsToProcess.subList(i, Math.min(i + batchSize, recordsToProcess.size()));
            processBatch(batch);
        }
    }

    private void processBatch(List<YourEntity> batch) {
        batch.forEach(record -> {
            processEntity(record);
            record.setStatus("processed");
            record.setUpdatedAt(new Date());
        });

        // Save the updated batch to the database
        yourRepository.saveAll(batch);
    }

    private void processEntity(YourEntity entity) {
        // Add your processing logic here
        System.out.println("Processing entity with ID: " + entity.getId());
    }
}
