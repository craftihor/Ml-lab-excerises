import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit5.CamelTestSupport;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.mockito.Mockito.*;

class InboundMessageRouteTest extends CamelTestSupport {

    @Mock
    private OMGService omgService;

    @Mock
    private MessageProcessor messageProcessor;

    @InjectMocks
    private InboundMessageRoute inboundMessageRoute;

    @EndpointInject("mock:result")
    private MockEndpoint mockResult;

    @EndpointInject("direct:start")
    private ProducerTemplate producerTemplate;

    @BeforeEach
    void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);

        // Mocking the route
        context.getRouteDefinition("inbound-message-route")
                .adviceWith(context, new AdviceWithRouteBuilder() {
                    @Override
                    public void configure() {
                        replaceFromWith("direct:start"); // Replace the actual endpoint URI with a test endpoint
                        weaveByToUri("mock:result").replace().to("mock:result");
                    }
                });

        context.start();
    }

    @Test
    void testRoute_withValidTransactionId() throws Exception {
        // Arrange
        OdysseyInboundMessage inputMessage = new OdysseyInboundMessage();
        inputMessage.setId("12345");
        inputMessage.setProgressStatus(OdysseyInboundMessage.ProgressStatus.PENDING);

        when(omgService.saveOdysseyInboundMessage(any())).thenReturn(inputMessage);

        // Expectations
        mockResult.expectedMessageCount(1);
        mockResult.message(0).body(OdysseyInboundMessage.class);

        // Act
        producerTemplate.sendBody("direct:start", inputMessage);

        // Assert
        mockResult.assertIsSatisfied();

        verify(omgService, times(1)).saveOdysseyInboundMessage(any());
        verify(messageProcessor, times(1)).process(any());
    }

    @Test
    void testRoute_withMissingTransactionId() throws Exception {
        // Arrange
        OdysseyInboundMessage inputMessage = new OdysseyInboundMessage();
        inputMessage.setId("12345");
        inputMessage.setProgressStatus(OdysseyInboundMessage.ProgressStatus.PENDING);

        when(omgService.saveOdysseyInboundMessage(any())).thenReturn(inputMessage);

        // Simulate missing transaction ID
        Exchange exchange = context.getEndpoint("direct:start").createExchange();
        exchange.getIn().setBody(inputMessage);
        exchange.setProperty(OMGConstant.CAMEL_PROPERTY_X_TRANSACTION_ID, null);

        // Expectations
        mockResult.expectedMessageCount(1);

        // Act
        producerTemplate.send("direct:start", exchange);

        // Assert
        mockResult.assertIsSatisfied();

        verify(omgService, times(1)).saveOdysseyInboundMessage(any());
        verify(messageProcessor, times(1)).process(any());
    }

    @Test
    void testRoute_messageProcessingException() throws Exception {
        // Arrange
        OdysseyInboundMessage inputMessage = new OdysseyInboundMessage();
        inputMessage.setId("12345");
        inputMessage.setProgressStatus(OdysseyInboundMessage.ProgressStatus.PENDING);

        doThrow(new RuntimeException("Processing error")).when(messageProcessor).process(any());

        // Expectations
        mockResult.expectedMessageCount(0); // Should not reach the end due to exception

        // Act & Assert
        try {
            producerTemplate.sendBody("direct:start", inputMessage);
        } catch (Exception e) {
            // Ignore exception, verify behavior
        }

        verify(messageProcessor, times(1)).process(any());
    }
}


import org.apache.camel.CamelContext;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.junit5.CamelTestSupport;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class InboundMessageRouteTest extends CamelTestSupport {

    @BeforeEach
    void setup() throws Exception {
        // Stop the Camel context
        context.stop();

        // Remove existing routes (if needed)
        context.removeRouteDefinitions(context.getRouteDefinitions());

        // Add a test-specific route
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() {
                from("direct:start") // Replace the original `from` endpoint
                    .routeId("test-inbound-message-route")
                    .process(exchange -> {
                        String body = exchange.getIn().getBody(String.class);
                        exchange.getIn().setBody("Processed: " + body); // Example processing
                    })
                    .to("mock:result"); // Mock endpoint for assertions
            }
        });

        // Start the Camel context
        context.start();
    }

    @Test
    void testRoute() throws Exception {
        // Send a test message to the new "direct:start" route
        template.sendBody("direct:start", "Test Message");

        // Mock endpoint assertions
        getMockEndpoint("mock:result").expectedBodiesReceived("Processed: Test Message");
        assertMockEndpointsSatisfied();
    }
}
