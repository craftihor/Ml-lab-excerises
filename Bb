import com.jayway.jsonpath.Configuration;
import com.jayway.jsonpath.JsonPath;
import com.jayway.jsonpath.spi.json.JsonProvider;
import com.jayway.jsonpath.spi.json.JsonSmartJsonProvider;

import java.util.HashMap;
import java.util.Map;

public class JsonPathWithCustomFunctions {

    public static void main(String[] args) {
        // JSON Input
        String json = """
        {
          "people": [
            { "name": "Jonathan", "age": 30 },
            { "name": "Alice", "age": 25 },
            { "name": "Bob", "age": 35 }
          ]
        }
        """;

        // Configure JSONPath with a custom function
        Configuration config = Configuration.builder()
                .jsonProvider(new JsonSmartJsonProvider())
                .mappingProvider(new CustomMappingProvider())
                .build();

        // Example 1: Substring function
        String substringResult = JsonPath
                .using(config)
                .parse(json)
                .read("$.people[*].name.substring(1, 4)");

        System.out.println("Substring Result: " + substringResult);

        // Example 2: Concat function
        String concatResult = JsonPath
                .using(config)
                .parse(json)
                .read("$.people[*].concat(name, age)");

        System.out.println("Concat Result: " + concatResult);
    }
}

// Custom MappingProvider (registers functions like substring and concat)
class CustomMappingProvider implements JsonPath.FunctionMappingProvider {
    private final Map<String, JsonPath.Function> functions = new HashMap<>();

    public CustomMappingProvider() {
        functions.put("substring", (args) -> {
            String str = args.get(0).toString();
            int start = Integer.parseInt(args.get(1).toString());
            int end = Integer.parseInt(args.get(2).toString());
            return str.substring(start, Math.min(end, str.length()));
        });

        functions.put("concat", (args) -> {
            String str1 = args.get(0).toString();
            String str2 = args.get(1).toString();
            return str1 + " " + str2;
        });
    }

    @Override
    public Map<String, JsonPath.Function> functions() {
        return functions;
    }
}
