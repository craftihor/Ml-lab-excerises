yypackage com.example.xmlparser.service;

import com.example.xmlparser.model.*;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.Unmarshaller;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class XmlToCsvService {

    @Value("${xml.file.path}")
    private String xmlFilePath;

    @Value("${csv.output.path}")
    private String csvOutputPath;

    public void convertXmlToCsv() throws Exception {
        SecLendCommissRep secLendCommissRep = loadXmlDocument();
        List<String> headers = getHeaders();

        try (FileWriter writer = new FileWriter(csvOutputPath)) {
            // Write headers
            writer.write(String.join("|", headers) + "\n");

            // Write data
            SecLendCommissSection section = secLendCommissRep.getSecLendCommissRepInfo().getSecLendCommissSection();
            SecInstr secInstr = section.getSecInstr();
            
            for (SecLendCommissDetl detl : section.getSecLendCommissDetl()) {
                List<String> rowData = new ArrayList<>();
                
                // Add common data
                rowData.add(secLendCommissRep.getTmstmp()); // businessDate
                rowData.add(detl.getLoanRef()); // tradeTicket
                rowData.add(""); // tradeTag (empty as not in XML)
                rowData.add(detl.getExtRef()); // external TradeID
                rowData.add(detl.getLoanTyp()); // activityType
                rowData.add(detl.getLenBorrInd()); // buyOrSell
                rowData.add(detl.getLoanOpngDt()); // tradeDate
                rowData.add(detl.getLoanClsgDt()); // valueDate
                rowData.add(secInstr.getIsinCd()); // ISIN
                rowData.add(secInstr.getInstrTyp()); // instrument Type
                rowData.add(secInstr.getSecNm()); // securityName
                rowData.add(String.valueOf(detl.getLoanQty().getValue())); // nominalAmount
                rowData.add(String.valueOf(detl.getLoanVal().getValue())); // netConsiderationoutstanding
                rowData.add(detl.getLoanVal().getIsoCurrCd()); // currency
                rowData.add(String.valueOf(detl.getBondPrcAccrInt())); // bondAccural Interest
                rowData.add(detl.getXchgRate().getFrstIsoCurrCd()); // firstCurrency
                rowData.add(detl.getXchgRate().getRecpIsoCurrCd()); // SecondCurrency
                rowData.add(String.valueOf(detl.getXchgRate().getValue())); // exchangeRate
                rowData.add(String.valueOf(detl.getFeeRate())); // feeRate
                rowData.add(String.valueOf(detl.getDivCoupReq())); // dividendCoupon
                rowData.add(String.valueOf(detl.getHdlgFeeAmnt().getValue())); // handling Fee
                rowData.add(detl.getHdlgFeeAmnt().getIsoCurrCd()); // handlingCurrency
                rowData.add(String.valueOf(detl.getCurntCommissAmnt().getValue())); // commissionAmount
                rowData.add(detl.getCurntCommissAmnt().getIsoCurrCd()); // commissionCurrency
                rowData.add(String.valueOf(detl.getAccrCommissAmnt().getValue())); // accuralCommissionAmount
                rowData.add(detl.getAccrCommissAmnt().getIsoCurrCd()); // accuralCommissionCurrency
                rowData.add(String.valueOf(detl.getCollPldgMrktVal().getValue())); // pledgedCollateralvalue
                rowData.add(detl.getCollPldgMrktVal().getIsoCurrCd()); // pledgedCollateralCurrency
                rowData.add(String.valueOf(detl.getCollPldgFeeRate())); // pledgedCollateralFee
                rowData.add(String.valueOf(detl.getCollPldgCurntCommissAmnt().getValue())); // pledged CollateralCurrent Amount
                rowData.add(detl.getCollPldgCurntCommissAmnt().getIsoCurrCd()); // pledgedCollateral CurrentCurrency
                rowData.add(String.valueOf(detl.getCollPldgAccrCommissAmnt().getValue())); // pledgedCollateralAccuralAmount
                rowData.add(detl.getCollPldgAccrCommissAmnt().getIsoCurrCd()); // pledgedCollateralAccuralCurrency
                rowData.add(detl.getCurntCommissStartDt()); // comissionStartDate
                rowData.add(detl.getCurntCommissEndDt()); // comissionEndDate
                rowData.add(secLendCommissRep.getAcct().getAcctId()); // settlement Depot ID
                rowData.add(secLendCommissRep.getAcct().getAcctNm()); // settlement DepotAccount
                rowData.add(""); // Root Cause (empty as not in XML)
                rowData.add(""); // Commentary (empty as not in XML)
                rowData.add("AUTO BORROW"); // Message Type (hardcoded)

                writer.write(String.join("|", rowData) + "\n");
            }
        }
    }

    private SecLendCommissRep loadXmlDocument() throws Exception {
        JAXBContext jaxbContext = JAXBContext.newInstance(SecLendCommissRep.class);
        Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
        return (SecLendCommissRep) unmarshaller.unmarshal(new File(xmlFilePath));
    }

    private List<String> getHeaders() {
        List<String> headers = new ArrayList<>();
        headers.add("businessDate");
        headers.add("tradeTicket");
        headers.add("tradeTag");
        headers.add("externalTradeID");
        headers.add("activityType");
        headers.add("buyOrSell");
        headers.add("tradeDate");
        headers.add("valueDate");
        headers.add("ISIN");
        headers.add("instrumentType");
        headers.add("securityName");
        headers.add("nominalAmount");
        headers.add("netConsiderationoutstanding");
        headers.add("currency");
        headers.add("bondAccuralInterest");
        headers.add("firstCurrency");
        headers.add("SecondCurrency");
        headers.add("exchangeRate");
        headers.add("feeRate");
        headers.add("dividendCoupon");
        headers.add("handlingFee");
        headers.add("handlingCurrency");
        headers.add("commissionAmount");
        headers.add("commissionCurrency");
        headers.add("accuralCommissionAmount");
        headers.add("accuralCommissionCurrency");
        headers.add("pledgedCollateralvalue");
        headers.add("pledgedCollateralCurrency");
        headers.add("pledgedCollateralFee");
        headers.add("pledgedCollateralCurrentAmount");
        headers.add("pledgedCollateralCurrentCurrency");
        headers.add("pledgedCollateralAccuralAmount");
        headers.add("pledgedCollateralAccuralCurrency");
        headers.add("comissionStartDate");
        headers.add("comissionEndDate");
        headers.add("settlementDepotID");
        headers.add("settlementDepotAccount");
        headers.add("RootCause");
        headers.add("Commentary");
        headers.add("MessageType");
        return headers;
    }
}



private List<List<Object>> getHeaderMetadata() {
    List<List<Object>> headerMetadata = new ArrayList<>();

    headerMetadata.add(List.of("String", "businessDate", true, "", "", true));
    headerMetadata.add(List.of("String", "tradeTicket", true, "", "", true));
    headerMetadata.add(List.of("String", "tradeTag", true, "", "", true));
    headerMetadata.add(List.of("String", "externalTradeID", true, "", "", true));
    headerMetadata.add(List.of("String", "activityType", true, "", "", true));
    headerMetadata.add(List.of("String", "buyOrSell", true, "", "", true));
    headerMetadata.add(List.of("String", "tradeDate", true, "", "", true));
    headerMetadata.add(List.of("String", "valueDate", true, "", "", true));
    headerMetadata.add(List.of("String", "ISIN", true, "", "", true));
    headerMetadata.add(List.of("String", "instrumentType", true, "", "", true));
    headerMetadata.add(List.of("String", "securityName", true, "", "", true));
    headerMetadata.add(List.of("Double", "nominalAmount", true, "", "", true));
    headerMetadata.add(List.of("Double", "netConsiderationoutstanding", true, "", "", true));
    headerMetadata.add(List.of("String", "currency", true, "", "", true));
    headerMetadata.add(List.of("Double", "bondAccuralInterest", true, "", "", true));
    headerMetadata.add(List.of("String", "firstCurrency", true, "", "", true));
    headerMetadata.add(List.of("String", "SecondCurrency", true, "", "", true));
    headerMetadata.add(List.of("Double", "exchangeRate", true, "", "", true));
    headerMetadata.add(List.of("Double", "feeRate", true, "", "", true));
    headerMetadata.add(List.of("Double", "dividendCoupon", true, "", "", true));
    headerMetadata.add(List.of("Double", "handlingFee", true, "", "", true));
    headerMetadata.add(List.of("String", "handlingCurrency", true, "", "", true));
    headerMetadata.add(List.of("Double", "commissionAmount", true, "", "", true));
    headerMetadata.add(List.of("String", "commissionCurrency", true, "", "", true));
    headerMetadata.add(List.of("Double", "accuralCommissionAmount", true, "", "", true));
    headerMetadata.add(List.of("String", "accuralCommissionCurrency", true, "", "", true));
    headerMetadata.add(List.of("Double", "pledgedCollateralvalue", true, "", "", true));
    headerMetadata.add(List.of("String", "pledgedCollateralCurrency", true, "", "", true));
    headerMetadata.add(List.of("Double", "pledgedCollateralFee", true, "", "", true));
    headerMetadata.add(List.of("Double", "pledgedCollateralCurrentAmount", true, "", "", true));
    headerMetadata.add(List.of("String", "pledgedCollateralCurrentCurrency", true, "", "", true));
    headerMetadata.add(List.of("Double", "pledgedCollateralAccuralAmount", true, "", "", true));
    headerMetadata.add(List.of("String", "pledgedCollateralAccuralCurrency", true, "", "", true));
    headerMetadata.add(List.of("String", "comissionStartDate", true, "", "", true));
    headerMetadata.add(List.of("String", "comissionEndDate", true, "", "", true));
    headerMetadata.add(List.of("String", "settlementDepotID", true, "", "", true));
    headerMetadata.add(List.of("String", "settlementDepotAccount", true, "", "", true));
    headerMetadata.add(List.of("String", "RootCause", true, "", "", true));
    headerMetadata.add(List.of("String", "Commentary", true, "", "", true));
    headerMetadata.add(List.of("String", "MessageType", true, "", "", true));

    return headerMetadata;
}

import org.json.JSONArray;
import org.json.JSONObject;

private JSONObject getHeaderMetadata() {
    JSONObject metadata = new JSONObject();

    JSONArray headers = new JSONArray();
    
    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "businessDate")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "tradeTicket")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "tradeTag")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "externalTradeID")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "activityType")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "buyOrSell")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "tradeDate")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "valueDate")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "ISIN")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "instrumentType")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "securityName")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "nominalAmount")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "netConsiderationoutstanding")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "currency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "bondAccuralInterest")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "firstCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "SecondCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "exchangeRate")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "feeRate")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "dividendCoupon")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "handlingFee")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "handlingCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "commissionAmount")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "commissionCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "accuralCommissionAmount")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "accuralCommissionCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "pledgedCollateralvalue")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "pledgedCollateralCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "pledgedCollateralFee")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "pledgedCollateralCurrentAmount")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "pledgedCollateralCurrentCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "Double")
        .put("displayName", "pledgedCollateralAccuralAmount")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "pledgedCollateralAccuralCurrency")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "comissionStartDate")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "comissionEndDate")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "settlementDepotID")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "settlementDepotAccount")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "RootCause")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "Commentary")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    headers.put(new JSONObject()
        .put("dataType", "String")
        .put("displayName", "MessageType")
        .put("filter", true)
        .put("sourceFormat", "")
        .put("displayFormat", "")
        .put("exceptionDetailScreen", true));

    metadata.put("headers", headers);

    return metadata;
}
