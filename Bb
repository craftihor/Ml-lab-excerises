public class XmlToCsvConverter {

    private static final XPathFactory xPathFactory = XPathFactory.newInstance();

    public static void xmlToCsv(String xmlString, String outputFile) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(new InputSource(new StringReader(xmlString)));

        // Get all unique XPaths
        Set<String> allPaths = getAllPaths(doc.getDocumentElement(), "");
        List<String> sortedPaths = new ArrayList<>(allPaths);
        Collections.sort(sortedPaths);

        // Write CSV
        try (PrintWriter writer = new PrintWriter(new File(outputFile))) {
            // Write header
            writer.println(String.join(",", sortedPaths));

            // Write data
            NodeList records = doc.getDocumentElement().getChildNodes();
            for (int i = 0; i < records.getLength(); i++) {
                if (records.item(i).getNodeType() == Node.ELEMENT_NODE) {
                    List<String> row = new ArrayList<>();
                    for (String path : sortedPaths) {
                        row.add(getElementValue((Element) records.item(i), path));
                    }
                    writer.println(String.join(",", row));
                }
            }
        }
    }

    private static Set<String> getAllPaths(Element element, String currentPath) {
        Set<String> paths = new HashSet<>();
        NodeList children = element.getChildNodes();
        for (int i = 0; i < children.getLength(); i++) {
            if (children.item(i).getNodeType() == Node.ELEMENT_NODE) {
                Element child = (Element) children.item(i);
                String childPath = currentPath + "/" + child.getTagName();
                paths.add(childPath);
                paths.addAll(getAllPaths(child, childPath));
            }
        }
        return paths;
    }

    private static String getElementValue(Element element, String xpath) {
        try {
            XPath xPath = xPathFactory.newXPath();
            Node node = (Node) xPath.evaluate(xpath, element, XPathConstants.NODE);
            return node != null ? node.getTextContent() : "";
        } catch (XPathExpressionException e) {
            return "";
        }
    }

    public static Map<String, String> getRecordValues(Element record, List<String> xpaths) {
        Map<String, String> values = new HashMap<>();
        for (String xpath : xpaths) {
            values.put(xpath, getElementValue(record, xpath));
        }
        return values;
    }
