import java.util.List;

public class SecLendCommiss {

    private String xmlId;
    private String tmstmp;
    private String repFreq;
    private String repMode;
    private String repActvFlg;
    private CustRepOptSubscr custRepOptSubscr;
    private String stentNbr;
    private XchgRate xchgRate;
    private List<SecLendCommissDetl> secLendCommissDetlList;

    // Getters and Setters

    public static class CustRepOptSubscr {
        private String schdId;
        private String tmplId;
        private String tmplDetlId;
        private String repSubscrim;

        // Getters and Setters
    }

    public static class XchgRate {
        private String frstIsoCurrCd;
        private String recpIsoCurrCd;
        private double value;

        // Getters and Setters
    }

    public static class SecLendCommissDetl {
        private String loanTyp;
        private String lenBorrInd;
        private String streetChgd;
        private String loanRef;
        private String uti;
        private String extRef;
        private String loanDpngDt;
        private String loanOpngDt;
        private String loanClsgDt;
        private LoanQty loanQty;
        private LoanVal loanVal;
        private double bondPrcAccrInt;
        private XchgRate xchgRate;
        private double feeRate;
        private double divCoupReq;
        private HdlgFeeAmnt hdlgFeeAmnt;
        private CurntCommissAmnt curntCommissAmnt;
        private AccrCommissAmnt accrCommissAmnt;
        private CollPldgMrktVal collPldgMrktVal;
        private double collPldgFeeRate;
        private CollPldgCurntCommissAmnt collPldgCurntCommissAmnt;
        private CollPldgAccrCommissAmnt collPldgAccrCommissAmnt;
        private String curntCommissStartDt;
        private String curntCommissEndDt;

        // Getters and Setters

        public static class LoanQty {
            private String qtyTyp;
            private double value;

            // Getters and Setters
        }

        public static class LoanVal {
            private String isoCurrCd;
            private double value;

            // Getters and Setters
        }

        public static class HdlgFeeAmnt {
            private String isoCurrCd;
            private double value;

            // Getters and Setters
        }

        public static class CurntCommissAmnt {
            private String isoCurrCd;
            private double value;

            // Getters and Setters
        }

        public static class AccrCommissAmnt {
            private String isoCurrCd;
            private double value;

            // Getters and Setters
        }

        public static class CollPldgMrktVal {
            private String isoCurrCd;
            private double value;

            // Getters and Setters
        }

        public static class CollPldgCurntCommissAmnt {
            private String isoCurrCd;
            private double value;

            // Getters and Setters
        }

        public static class CollPldgAccrCommissAmnt {
            private String isoCurrCd;
            private double value;

            // Getters and Setters
        }
    }
}


package com.example.xmltocsv;

import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.opencsv.CSVWriter;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

@SpringBootApplication
public class XmlToCsvApplication implements CommandLineRunner {

    private static final String XML_FILE_PATH = "src/main/resources/input.xml";
    private static final String CSV_FILE_PATH = "src/main/resources/output.csv";

    public static void main(String[] args) {
        SpringApplication.run(XmlToCsvApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        // Read XML and convert it to POJO
        SecLendCommiss secLendCommiss = readXml();

        // Write POJO data to CSV
        writeCsv(secLendCommiss);
    }

    private SecLendCommiss readXml() throws IOException {
        XmlMapper xmlMapper = new XmlMapper();
        return xmlMapper.readValue(new File(XML_FILE_PATH), SecLendCommiss.class);
    }

    private void writeCsv(SecLendCommiss secLendCommiss) throws IOException {
        try (CSVWriter writer = new CSVWriter(new FileWriter(CSV_FILE_PATH))) {
            // Write header
            writer.writeNext(new String[]{
                    "xmlId", "tmstmp", "repFreq", "repMode", "repActvFlg",
                    "schdId", "tmplId", "tmplDetlId", "RepSubscrim",
                    "StentNbr", "frstIsoCurrCd", "recpIsoCurrCd", "xchgRate"
            });

            // Write data
            writer.writeNext(new String[]{
                    secLendCommiss.getXmlId(), secLendCommiss.getTmstmp(), secLendCommiss.getRepFreq(),
                    secLendCommiss.getRepMode(), secLendCommiss.getRepActvFlg(),
                    secLendCommiss.getCustRepOptSubscr().getSchdId(),
                    secLendCommiss.getCustRepOptSubscr().getTmplId(),
                    secLendCommiss.getCustRepOptSubscr().getTmplDetlId(),
                    secLendCommiss.getCustRepOptSubscr().getRepSubscrim(),
                    secLendCommiss.getStentNbr(), 
                    secLendCommiss.getInfo().getXchgRate().getFrstIsoCurrCd(), 
                    secLendCommiss.getInfo().getXchgRate().getRecpIsoCurrCd(),
                    String.valueOf(secLendCommiss.getInfo().getXchgRate().getXchgRate())
            });

            // If you have multiple details, iterate through them and write to the CSV
            for (SecLendCommissDetl detl : secLendCommiss.getSection().getDetls()) {
                writer.writeNext(new String[]{
                        detl.getLoanRef(), detl.getUti(), detl.getExtRef(),
                        detl.getLoanDpngDt(), detl.getLoanOpngDt(), detl.getLoanClsgDt(),
                        String.valueOf(detl.getLoanQty().getQty()), 
                        String.valueOf(detl.getLoanVal().getVal()),
                        String.valueOf(detl.getBondPrcAccrint()), 
                        String.valueOf(detl.getFeeRate()),
                        String.valueOf(detl.getDivCoupReq()), 
                        String.valueOf(detl.getHdlgFeeAmnt().getAmount()),
                        String.valueOf(detl.getCurntCommissAmnt().getAmount()),
                        String.valueOf(detl.getAccrCommissAmnt().getAmount())
                });
            }
        }
    }
}
