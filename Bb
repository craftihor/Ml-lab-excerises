import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.List;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class RuleProcessorTest {

    @InjectMocks
    private RuleProcessor ruleProcessor;

    @Mock
    private RuleEngineClient ruleEngineClient;

    @Mock
    private Exchange exchange;

    @Mock
    private Message message;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        when(exchange.getIn()).thenReturn(message);
    }

    @ParameterizedTest
    @CsvSource({
        "0, EUR, 0, 1, 10, RP1, 10, true",
        "400, EUR, 10, 3, 30, RP2, 25, true",
        "750, EUR, 20, 5, 40, RP3, 40, false",
        "3000, EUR, 30, 10, 50, RP4, 60, true",
        "7500, EUR, 40, 20, 60, RP5, 80, false",
        "15000, EUR, 100, 35, 100, RPT, 95, true"
    })
    void testProcess(double accrualAmount, String currency, int points, int autoBorrowAge, 
                     int riskPoints, String riskPriority, int pointsToConsider, boolean wamRuleDisabled) throws Exception {
        // Arrange
        TradeVO tradeVO = new TradeVO();
        tradeVO.setAccrualCommissionAmount(accrualAmount);
        tradeVO.setAccrualCommissionAmountCurrency(currency);
        tradeVO.setPoints(points);
        tradeVO.setAutoBorrowAgeDays(autoBorrowAge);
        
        TradeEvent latestTradeEvent = new TradeEvent();
        TradeProcessingFlag flag = new TradeProcessingFlag();
        flag.setWAMRuleDisabled(wamRuleDisabled);
        latestTradeEvent.setTradeProcessingFlag(flag);
        tradeVO.setLatestTradeEvent(latestTradeEvent);

        List<TradeVO> tradeVOs = Arrays.asList(tradeVO);
        when(message.getBody()).thenReturn(tradeVOs);

        // Mock the ruleEngineClient to return the input list
        when(ruleEngineClient.execute(anyList())).thenAnswer(invocation -> invocation.getArgument(0));

        // Act
        ruleProcessor.process(exchange);

        // Assert
        verify(ruleEngineClient, times(1)).execute(anyList());
        verify(message).setBody(anyList());

        // Capture the processed list
        ArgumentCaptor<List<TradeVO>> processedListCaptor = ArgumentCaptor.forClass(List.class);
        verify(message).setBody(processedListCaptor.capture());
        List<TradeVO> processedList = processedListCaptor.getValue();

        // Assert the processed list
        assertEquals(1, processedList.size());
        TradeVO processedTradeVO = processedList.get(0);
        assertEquals(accrualAmount, processedTradeVO.getAccrualCommissionAmount());
        assertEquals(currency, processedTradeVO.getAccrualCommissionAmountCurrency());
        assertEquals(points, processedTradeVO.getPoints());
        assertEquals(autoBorrowAge, processedTradeVO.getAutoBorrowAgeDays());
        assertEquals(wamRuleDisabled, processedTradeVO.getLatestTradeEvent().getTradeProcessingFlag().isWAMRuleDisabled());
    }

    @Test
    void testProcessWithEmptyList() throws Exception {
        // Arrange
        when(message.getBody()).thenReturn(Arrays.asList());

        // Act
        ruleProcessor.process(exchange);

        // Assert
        verify(ruleEngineClient, never()).execute(anyList());
        verify(message, never()).setBody(anyList());
    }

    @Test
    void testProcessWithNullBody() throws Exception {
        // Arrange
        when(message.getBody()).thenReturn(null);

        // Act
        ruleProcessor.process(exchange);

        // Assert
        verify(ruleEngineClient, never()).execute(anyList());
        verify(message, never()).setBody(anyList());
    }
}


@Async
public void initiateAsyncTradeProcessing(List<String> tradeIds, String odysseyNotificationId, TradeEvent tradeEventFromUI) {
    if (!CollectionUtils.isEmpty(tradeIds)) {
        // Define batch size to limit the number of trades fetched at once
        int fetchBatchSize = CommonConstants.TRADE_EVENT_TRADE_FETCH_LIMIT;
        int processingBatchSize = CommonConstants.TRADE_EVENT_TRADE_PROCESSING_LIMIT;
        int totalTrades = tradeIds.size();
        AtomicInteger index = new AtomicInteger();
        String xTransactionId = Utils.getXTransactionId();

        // Define a custom thread pool for running async tasks if necessary
        ExecutorService customExecutor = Executors.newFixedThreadPool(10);  // Or a size based on your need

        // A list to track all CompletableFutures
        List<CompletableFuture<Void>> completableFutures = new ArrayList<>();

        // Parallelize fetching trades by splitting into batches
        IntStream.range(0, (int) Math.ceil((double) totalTrades / fetchBatchSize))
            .parallel()
            .forEach(batchIndex -> {
                int start = batchIndex * fetchBatchSize;
                int end = Math.min(start + fetchBatchSize, totalTrades);
                List<String> tradeIdBatch = tradeIds.subList(start, end);

                // Fetch trades for the current batch asynchronously
                CompletableFuture<Void> fetchFuture = CompletableFuture.runAsync(() -> {
                    try {
                        List<TradeVO> trades = opsDashboardService.findAllOpenTradesByIds(tradeIdBatch);

                        // Group fetched trades by exception type and process
                        trades.stream()
                              .collect(Collectors.groupingBy(TradeVO::getExceptionType))
                              .forEach((extype, tradesForExtype) -> {
                                  // Partition into smaller batches and process
                                  ListUtils.partition(tradesForExtype, processingBatchSize)
                                           .forEach(tradeBatch -> {
                                               CompletableFuture<Void> processFuture = CompletableFuture.runAsync(() -> {
                                                   List<String> tradeIdsForBatch = tradeBatch.stream()
                                                           .map(trade -> trade.getId().toString())
                                                           .collect(Collectors.toList());

                                                   // Initiate trade processing for the batch
                                                   initiateTradeProcessing(tradeBatch, odysseyNotificationId, xTransactionId + "-" + index.incrementAndGet(), tradeEventFromUI);
                                               }, customExecutor);

                                               // Track the processing future
                                               completableFutures.add(processFuture);
                                           });
                              });
                    } catch (Exception e) {
                        // Log and handle exception
                        LOGGER.error("Error fetching or processing trades for batch {}", tradeIdBatch, e);
                    }
                }, customExecutor);

                // Track the fetch future
                completableFutures.add(fetchFuture);
            });

        // Wait for all async tasks to complete
        CompletableFuture<Void> allFutures = CompletableFuture.allOf(completableFutures.toArray(new CompletableFuture[0]));

        // Handle completion and closing logic
        allFutures.whenComplete((result, ex) -> {
            if (ex != null) {
                LOGGER.error("Error during async trade processing", ex);
            }
            closeAsyncTradeProcessing(odysseyNotificationId);
            customExecutor.shutdown();  // Shut down the custom executor
        });
    }
}


@Async
public void initiateAsyncTradeProcessing(List<String> tradeIds, String odysseyNotificationId, TradeEvent tradeEventFromUI) {
    if (CollectionUtils.isEmpty(tradeIds)) {
        return;
    }

    String xTransactionId = Utils.getXTransactionId();
    AtomicInteger index = new AtomicInteger();
    int batchSize = CommonConstants.TRADE_EVENT_TRADE_PROCESSING_LIMIT;

    // Process trades in batches
    for (int i = 0; i < tradeIds.size(); i += batchSize) {
        List<String> batch = tradeIds.subList(i, Math.min(tradeIds.size(), i + batchSize));
        
        CompletableFuture.runAsync(() -> {
            Map<String, List<String>> tradesByExtype = new HashMap<>();
            
            // Process each trade in the batch
            opsDashboardService.streamOpenTradesByIds(batch).forEach(trade -> {
                tradesByExtype.computeIfAbsent(trade.getExtype(), k -> new ArrayList<>()).add(trade.getId());
                
                // If we've reached the processing limit for this extype, process and clear
                if (tradesByExtype.get(trade.getExtype()).size() >= batchSize) {
                    processTradeGroup(trade.getExtype(), tradesByExtype.get(trade.getExtype()), 
                                      odysseyNotificationId, xTransactionId, index, tradeEventFromUI);
                    tradesByExtype.get(trade.getExtype()).clear();
                }
            });
            
            // Process any remaining trades
            tradesByExtype.forEach((extype, remainingIds) -> {
                if (!remainingIds.isEmpty()) {
                    processTradeGroup(extype, remainingIds, odysseyNotificationId, xTransactionId, index, tradeEventFromUI);
                }
            });
        });
    }
}

private void processTradeGroup(String extype, List<String> tradeIds, String odysseyNotificationId, 
                               String xTransactionId, AtomicInteger index, TradeEvent tradeEventFromUI) {
    String transactionId = xTransactionId + "-" + index.incrementAndGet() + "-" + extype;
    initiateTradeProcessing(tradeIds, odysseyNotificationId, transactionId, tradeEventFromUI);
}
